import { html, css, LitElement } from 'lit-element';
import { ValidatableMixin } from '@anypoint-web-components/validatable-mixin/validatable-mixin.js';
import { ApiFormMixin } from '@api-components/api-form-mixin/api-form-mixin.js';
import formStyles from '@api-components/api-form-mixin/api-form-styles.js';
import '@polymer/iron-form/iron-form.js';
import '@anypoint-web-components/anypoint-button/anypoint-icon-button.js';
import '@anypoint-web-components/anypoint-checkbox/anypoint-checkbox.js';
import '@advanced-rest-client/arc-icons/arc-icons.js';
import '@advanced-rest-client/arc-definitions/arc-definitions.js';
import '@polymer/iron-icon/iron-icon.js';
import './api-headers-form-item.js';
/**
 * HTTP headers form build from AMF json/ld model.
 * The form is pre-populated with predefined values from the AMF model
 * using `api-view-model-transformer` element. This element is included in
 * `api-headers-editor`.
 *
 * **This API component replaces `raml-headers-form` component**. Old
 * component uses RAML data model generated by raml JS parser only.
 * If you need RAML form only or component that works with Polymer 1.0
 * use `raml-headers-form` instead.
 *
 * ## Building the view model
 *
 * For practical reasons this element consumes different data model than the
 * one used in AMF. Use `api-view-model-transformer` element to generate
 * data view model from AMF JSON ld schema. See demo page for example of
 * use.
 *
 * ### Generating view model from AMF
 *
 * ```html
 * <api-view-model-transformer on-view-model-changed="_updateView"></api-view-model-transformer>
 * <api-headers-form model="{{viewModel}}" value="{{headers}}"></api-headers-form>
 * <script>
 * const amf = getAmfFromRamlOrOas();
 * const processor = document.querySelector('api-view-model-transformer');
 * processor.amf = extractHeadersForMethod(amf);
 * processor.addEventListener('view-model-changed', (e) => {
 *  document.querySelector('api-headers-form') = e.detail.value;
 * });
 * < /script>
 * ```
 *
 * This example uses `getAmfFromRamlOrOas()` function where you implement
 * the logic of getting AMF json/ld data. It can be stored in file or parsed
 * using AMF parsers. The `extractHeadersForMethod()` function implements a
 * logic of extracting headers definition from a method (for example).
 *
 * ### Manually generating view model
 *
 * You can use `api-view-model-transformer` and `buildProperty()` function
 * to generate basic view model. You can also construct it on your own.
 * See `api-view-model-transformer` element documentation for model schema.
 *
 * ## Changes in v2
 *
 * The component won't listen for `headers-value-changed` custom event.
 * Components / applications using this element should handle headers change
 * event in the application and generate new model for the view.
 * Setting `value` makes no effect on the element. Only way to change
 * generated UI is to change the model.
 *
 * ## Styling
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--api-headers-form` | Mixin applied to this element | `{}`
 * `--api-headers-form-delete-icon-margin-top` | Margin top of the delete button | `16px`
 * `--api-headers-form-delete-icon-margin-top-narrow` | Margin top of the delete button in narrow layout | `16px`
 * `--api-headers-form-enable-checkbox-margin-top` | Margin top of the enable checkbox | `32px`
 * `--api-headers-form-enable-checkbox-margin-top` | Margin top of the enable checkbox in narrow layout | `32px`
 * `--api-headers-form-item` | Mixin applied to each form item. Each for item is separate element. | `{}`
 * `--api-headers-editore-hint-icon-margin-top` | Margin top of help icon. | `16px`
 * `--api-headers-editore-hint-icon-margin-top-narrow` | Margin top of help icon in narrow layout. | `16px`
 * `--api-headers-form-name-input` | Mixin applied to header name input | `{}`
 * `--api-headers-form-name-input-narrow` | Mixin applied to header name input in narrow layout | `{}`
 * `--api-headers-form-array-parameter` | Mixin applied to the value input when the input is an array | `{}`
 *
 * See `api-headers-form-item` and `api-form-mixin/api-form-styles` for more styling API.
 *
 * @customElement
 * @demo demo/index.html
 * @appliesMixin ApiFormMixin
 * @appliesMixin ValidatableMixin
 */
class ApiHeadersForm extends ValidatableMixin(ApiFormMixin(LitElement)) {
  static get styles() {
    return [
      formStyles,
      css`:host {
        display: block;
      }

      api-headers-form-item {
        flex: 1;
      }

      .delete-icon {
        margin-top: var(--api-headers-form-delete-icon-margin-top, 16px);
      }

      .enable-checkbox {
        margin-top: var(--api-headers-form-enable-checkbox-margin-top, 32px);
        margin-right: 8px;
      }

      :host([narrow]) .delete-icon {
        margin-top: var(--api-headers-form-delete-icon-margin-top-narrow, 16px);
      }

      :host([narrow]) .enable-checkbox {
        margin-top: var(--api-headers-form-enable-checkbox-margin-top-narrow, 32px);
      }

      [hidden] {
        display: none !important;
      }

      .empty-info {
        color: var(--empty-info-color, rgba(0, 0, 0, 0.74));
        font-size: var(--empty-info-font-size, 16px);
      }`
    ];
  }

  render() {
    const {
      renderEmptyMessage,
      renderOptionalCheckbox,
      allowDisableParams,
      readOnly,
      hasOptional,
      narrow,
      noDocs,
      allowCustom
    } = this;
    const model = this.model || [];
    return html`<arc-definitions></arc-definitions>

    ${renderEmptyMessage ? html`<p class="empty-info">Headers are not defined for this endpoint</p>` : undefined}

    <iron-form>
      <form enctype="application/json">
        ${renderOptionalCheckbox ? html`<div class="optional-checkbox">
          <anypoint-checkbox class="toggle-checkbox" checked="{{optionalOpened}}" title="Shows or hides optional parameters">Show optional headers</anypoint-checkbox>
        </div>` : undefined}
        ${model.map((item, index) => html`
        <div class="form-item" ?data-optional="${this.computeIsOptional(hasOptional, item)}">
          ${allowDisableParams ? html`
          <anypoint-checkbox
            class="enable-checkbox"
            ?checked="${item.schema.enabled}"
            data-index="${index}"
            @checked-changed="${this._enableCheckedHandler}"
            title="Enable or disable this header"
            ?disabled="${readOnly}"></anypoint-checkbox>` : undefined}
          <api-headers-form-item
            data-index="${index}"
            .name="${item.name}"
            @name-changed="${this._nameChangeHandler}"
            value="${item.value}"
            @value-changed="${this._valueChangeHandler}"
            .model="${item}"
            ?required="${item.required}"
            .readOnly="${readOnly}"
            .isCustom="${item.schema.isCustom}"
            .isArray="${item.schema.isArray}"
            ?narrow="${narrow}"
            .noDocs="${noDocs}">
            <anypoint-icon-button
              title="Remove this header"
              class="action-icon delete-icon"
              data-index="${index}"
              @click="${this._removeCustom}"
              slot="suffix"
              ?disabled="${readOnly}">
              <iron-icon icon="arc:remove-circle-outline"></iron-icon>
            </anypoint-icon-button>
          </api-headers-form-item>
        </div>`)}
      </form>
    </iron-form>

    ${allowCustom ? html`<div class="add-action">
      <anypoint-button
        class="action-button"
        @tap="${this.add}"
        title="Add new header"
        ?disabled="${readOnly}">
        <iron-icon
          class="action-icon"
          icon="arc:add-circle-outline"
          alt="Add header icon"></iron-icon>
        Add header
      </anypoint-button>
    </div>` : undefined}
`;
  }

  static get properties() {
    return {
      /**
       * Current value of the headers. Changing the value will update the list
       * of the headers.
       */
      value: { type: String },
      /**
       * Prohibits rendering of the documentation (the icon and the
       * description).
       * Note, Set is separately for `api-view-model-transformer`
       * component as this only affects "custom" items.
       */
      noDocs: { type: Boolean },
      /**
       * When set the editor is in read only mode.
       */
      readOnly: { type: Boolean },
      /**
       * Automatically validates the input on value change.
       */
      autoValidate: { type: Boolean }
    };
  }

  get value() {
    return this._value;
  }

  set value(value) {
    const old = this._value;
    /* istanbul ignore if */
    if (old === value) {
      return;
    }
    this._value = value;
    this.dispatchEvent(new CustomEvent('value-changed', {
      detail: {
        value
      }
    }));
  }

  get model() {
    return this._model;
  }

  set model(value) {
    const old = this._model;
    /* istanbul ignore if */
    if (old === value) {
      return;
    }
    super.model = value;
    this.requestUpdate('model', old);
    this._modelChanged(value, this.readOnly);
  }

  get readOnly() {
    return this._readOnly;
  }

  set readOnly(value) {
    const old = this._readOnly;
    /* istanbul ignore if */
    if (old === value) {
      return;
    }
    this._readOnly = value;
    this.requestUpdate('readOnly', old);
    this._modelChanged(this.model, value);
  }

  // Appends an empty header to the list.
  add() {
    if (!this.allowCustom) {
      return;
    }
    this.addCustom('header');
  }

  _modelChanged(model, readOnly) {
    if (readOnly || !model) {
      return;
    }
    if (this.invalid) {
      this.invalid = false;
    }
    this._updateValue(this.autoValidate);
    this._autoDescribeModel(model);
  }
  /**
   * Updates value of the element when model change.
   * @param {Boolean} validate When true then it performs validation after setting
   * the value.
   */
  _updateValue(validate) {
    if (this.__updatingModelValue || this.readOnly) {
      return;
    }
    this.__updatingModelValue = true;
    setTimeout(() => {
      this.__updateValue(validate);
      this.__updatingModelValue = false;
    });
  }
  /**
   * Creates a header value for current model.
   * @param {Boolean} validate When true then it performs validation after setting
   * the value.
   */
  __updateValue(validate) {
    const h = this.model;
    if (!h || !h.length) {
      this.value = '';
      if (this.invalid) {
        this.invalid = false;
      }
      return;
    }
    let value = '';
    for (let i = 0, len = h.length; i < len; i++) {
      const item = h[i];
      if (item.schema && item.schema.enabled === false) {
        continue;
      }
      const n = item.name || '';
      let v = item.value || '';
      if (!n && !v) {
        continue;
      }
      if (v instanceof Array) {
        v = v.join(',');
      }
      if (!v && !item.required) {
        continue;
      }
      if (value[0]) {
        value += '\n';
      }
      value += n + ': ' + v;
    }
    this.value = value;
    if (validate) {
      this.validate();
    }
  }
  /**
   * Adds documentation for headers that doesn't have it already.
   *
   * @param {Array} model View model
   */
  _autoDescribeModel(model) {
    if (this.noDocs) {
      return;
    }
    model.forEach((item, index) => this._fillModelDescription(item, index));
  }
  /**
   * Queries for header information and updates header info if needed.
   *
   * @param {Object} item View model item
   * @param {Number} index Position of the item in `model` array
   */
  _fillModelDescription(item, index) {
    if (item.hasDescription || item.isCustom) {
      return;
    }
    const type = this._queryHeaderData(item.name);
    if (!type) {
      return;
    }
    const model = this.model;
    model[index].description = type.desc;
    model[index].hasDescription = true;
    model[index].schema.examples = [type.example];
    this.model = [...model];
  }
  /**
   * Queries for a header definition.
   *
   * @param {String} name header name to query
   * @return {Object|undefined} Header definition or undefined.
   */
  _queryHeaderData(name) {
    const suggestions = this.shadowRoot.querySelector('arc-definitions').queryHeaders(name, 'request');
    if (!suggestions) {
      return;
    }
    name = name.toLowerCase();
    return suggestions.find((i) => i.key.toLowerCase() === name);
  }

  _getValidity() {
    const form = this.shadowRoot && this.shadowRoot.querySelector('iron-form');
    return form ? form.validate() : true;
  }

  _enableCheckedHandler(e) {
    const index = Number(e.target.dataset.index);
    if (index !== index) {
      return;
    }
    this.model[index].schema.enabled = e.target.checked;
    // this.model = [...this.model];
    this._updateValue(this.autoValidate);
  }

  _nameChangeHandler(e) {
    const index = Number(e.target.dataset.index);
    if (index !== index) {
      return;
    }
    this.model[index].name = e.target.value;
    // this.model = [...this.model];
    this._updateValue(this.autoValidate);
  }

  _valueChangeHandler(e) {
    const index = Number(e.target.dataset.index);
    if (index !== index) {
      return;
    }
    this.model[index].value = e.target.value;
    // this.model = [...this.model];
    this._updateValue(this.autoValidate);
  }
}

window.customElements.define('api-headers-form', ApiHeadersForm);
